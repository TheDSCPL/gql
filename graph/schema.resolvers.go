package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.25

import (
	"context"
	"github.com/vektah/gqlparser/v2/gqlerror"
	"gituhub.com/TheDSCPL/gql/graph/model"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.NewUser) (*model.User, error) {
	r.usersMutex.Lock()
	defer r.usersMutex.Unlock()

	if _, ok := r.usersByName[input.Name]; ok {
		return nil, gqlerror.Errorf("user already exists")
	}

	u := &model.User{
		ID:   model.NewID(),
		Name: input.Name,
	}

	r.usersByID[u.ID] = u
	r.usersByName[u.Name] = u

	return u, nil
}

// CreateTodo is the resolver for the createTodo field.
func (r *mutationResolver) CreateTodo(ctx context.Context, input model.NewTodo) (*model.Todo, error) {
	userID := model.ID(input.UserID)

	if !userID.IsValid() {
		return nil, gqlerror.Errorf("invalid userID")
	}

	r.usersMutex.RLock()
	defer r.usersMutex.RUnlock()

	if _, ok := r.usersByID[userID]; !ok {
		return nil, gqlerror.Errorf("unknown userID")
	}

	ret := &model.Todo{
		ID:     model.NewID(),
		Done:   false,
		UserID: userID,
		Text:   input.Text,
	}
	r.todos = append(r.todos, ret)

	return ret, nil
}

// Todos is the resolver for the todos field.
func (r *queryResolver) Todos(ctx context.Context) ([]*model.Todo, error) {
	return r.todos, nil
}

// User is the resolver for the user field.
func (r *todoResolver) User(ctx context.Context, obj *model.Todo) (*model.User, error) {
	if obj == nil || !obj.UserID.IsValid() {
		return nil, nil
	}

	r.usersMutex.RLock()
	defer r.usersMutex.RUnlock()
	u, ok := r.usersByID[obj.UserID]
	if !ok {
		return nil, nil
	}

	return u, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Todo returns TodoResolver implementation.
func (r *Resolver) Todo() TodoResolver { return &todoResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type todoResolver struct{ *Resolver }
